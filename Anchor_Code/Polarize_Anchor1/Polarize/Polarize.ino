#include <BLEPeripheral.h>
#include <iBeacon.h>
 
iBeacon beacon;
 
const int LED_RED = 23;
const int LED_GREEN = 24;
const int ANTENNA_SWITCH = 25;
 
char* uuid = "d8ac484e-4fbb-4b36-bf12-c249ab83673b";
unsigned short major = 888;
unsigned short minor = 201;
unsigned short measuredPower = -55;
 
bool isTransmitPhase = true;
 
BLEPeripheral blePeripheral = BLEPeripheral();
 
void setup() {
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(ANTENNA_SWITCH, OUTPUT);
 
  Serial.begin(115200);
  Serial.println(" ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏™‡πà‡∏á-‡∏£‡∏±‡∏ö Beacon ‡∏à‡∏£‡∏¥‡∏á");
 
  blePeripheral.setLocalName("n");  // BLEPeripheral ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
  blePeripheral.begin();
}
 
void loop() {
  if (isTransmitPhase) {
    // === ‡πÇ‡∏´‡∏°‡∏î‡∏™‡πà‡∏á beacon ===
    digitalWrite(ANTENNA_SWITCH, HIGH);  // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏™‡∏≤‡∏™‡πà‡∏á
    digitalWrite(LED_GREEN, HIGH);       // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏™‡πà‡∏á
    digitalWrite(LED_RED, LOW);
 
    beacon.begin(uuid, major, minor, measuredPower);
    Serial.println(" ‡∏™‡πà‡∏á beacon ‡πÅ‡∏•‡πâ‡∏ß!");
 
    delay(4000);  // ‡∏™‡πà‡∏á 4 ‡∏ß‡∏¥
    beacon.end();
  } else {
    // === ‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ö beacon ===
    digitalWrite(ANTENNA_SWITCH, LOW);   // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏™‡∏≤‡∏£‡∏±‡∏ö
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, HIGH);         // ‡πÅ‡∏î‡∏á = ‡∏£‡∏±‡∏ö
 
    Serial.println("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ beacon...");
 
    BLECentral central = blePeripheral.central();
 
    if (central) {
      // ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå BLE
      Serial.print(" ‡∏û‡∏ö beacon ‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ");
      Serial.println(central.address());
      Serial.println(" ‡∏£‡∏±‡∏ö beacon ‡πÅ‡∏•‡πâ‡∏ß!");
 
      // ‡πÄ‡∏õ‡∏¥‡∏î LED ‡∏™‡∏≠‡∏á‡∏î‡∏ß‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      digitalWrite(LED_GREEN, HIGH);
      digitalWrite(LED_RED, HIGH);
 
      delay(2000);
    }
  }
 
  isTransmitPhase = !isTransmitPhase;  // Toggle ‡∏™‡πà‡∏á/‡∏£‡∏±‡∏ö
  delay(1000);  // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏≠‡∏ö
}