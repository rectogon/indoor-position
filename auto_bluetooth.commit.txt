# check_discovered_device ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Bluetooth ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡πÄ‡∏à‡∏≠ 
    # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πà‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Kivy ‡∏ö‡∏ô Python ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Bluetooth 
    # (‡∏ú‡πà‡∏≤‡∏ô self.bridge) ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Interface ‡∏Ç‡∏≠‡∏á CoreBluetooth ‡∏ö‡∏ô macOS/iOS

    def check_discovered_device(self, dt):
        try:
            device = self.bridge.getLastDiscoveredDevice() #‡∏î‡∏∂‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ú‡πà‡∏≤‡∏ô bridge (‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö CoreBluetooth ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
            if not device:
                return

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å device
            device_name = device.objectForKey_(objc_str("name")).UTF8String() 
            device_uuid = device.objectForKey_(objc_str("uuid")).UTF8String()
            device_rssi = device.objectForKey_(objc_str("rssi")).intValue()
            device_major = device.objectForKey_(objc_str("major")).intValue()
            device_minor = device.objectForKey_(objc_str("minor")).intValue() # device ‡∏ó‡∏±‡πâ‡∏á 5 ‡∏Ñ‡∏∑‡∏≠ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å dictionary ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠, UUID, ‡∏Ñ‡πà‡∏≤ RSSI, major/minor



            # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ device_name/device_uuid ‡πÄ‡∏õ‡πá‡∏ô bytes
            if isinstance(device_name, bytes): # ‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô Str
                device_name = device_name.decode('utf-8')
            if isinstance(device_uuid, bytes): #‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô Str
                device_uuid = device_uuid.decode('utf-8')

            device_uuid_clean = device_uuid.replace("-", "").upper() #‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô uppercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô

            Logger.info(f"üîç Found: {device_name}, UUID: {device_uuid[:8]}..., Major: {device_major}, RSSI: {device_rssi}") #‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ device ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏°‡∏µ UUID ‡πÅ‡∏•‡∏∞ major ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö target ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏°

            # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Target ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            is_target_device = any(
                target["uuid"].upper() == device_uuid_clean and target["major"] == device_major 
                for target in self.target_data_set
            )

            if is_target_device:
                Logger.info(f"üéØ TARGET DEVICE FOUND! UUID: {device_uuid[:8]}..., Major: {device_major}")
                self.current_device_uuid = device_uuid
                self.found_data.add((device_uuid, device_major, device_rssi))
                self.scan_results.append((device_uuid, device_major, device_rssi))

                # üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT
                if not self.gatt_connected:
                    Logger.info(f"üîó Auto-connecting GATT to target device...")
                    self.auto_connect_gatt(device_uuid)

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                self.display_target_device_info(device_name, device_uuid, device_rssi, device_major, device_minor)

            else:
                display_text = f"üì± Device: {device_name}\n"
                display_text += f"üÜî UUID: {device_uuid[:8]}...\n"
                display_text += f"üì∂ RSSI: {device_rssi} dBm\n"
                display_text += f"üî¢ Major: {device_major} | Minor: {device_minor}\n"
                display_text += f"‚ùå Not a target device"
                self.root.ids.label.text = display_text
                Logger.info(f"‚ùå Not target device: {device_name}")

        except Exception as e:
            Logger.error(f"Error in check_discovered_device: {e}")

#/////////////////////////////////////////////////////////////////////////////////////


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô display_target_device_info() ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Bluetooth ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (target device)
#  ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô label ‡∏Ç‡∏≠‡∏á UI (‡∏ú‡πà‡∏≤‡∏ô self.root.ids.label.text) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    def display_target_device_info(self, name, uuid, rssi, major, minor):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• target device"""
        try:
            display_text = f"üéØ TARGET DEVICE FOUND!\n"
            display_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            display_text += f"üì± Device: {name}\n"
            display_text += f"üÜî UUID: {uuid[:8]}...\n"
            display_text += f"üì∂ RSSI: {rssi} dBm\n"
            display_text += f"üî¢ Major: {major} | Minor: {minor}\n"
            display_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GATT
            if self.gatt_connected:
                display_text += f"üîó GATT: ‚úÖ Connected\n"
                display_text += f"üì∂ RSSI Monitoring: Active\n"
            else:
                display_text += f"üîó GATT: üîÑ Connecting...\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            display_text += f"\nüìä Found Devices: {len(self.found_data)}/4\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ target ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            found_targets = []
            for uuid_found, major_found, rssi_found in self.found_data:
                target_name = self.get_target_name(uuid_found, major_found)
                found_targets.append(f"{target_name}: {rssi_found}dBm")
            
            if found_targets:
                display_text += f"‚úÖ Found: {', '.join(found_targets)}"
            
            self.root.ids.label.text = display_text
            
        except Exception as e:
            Logger.error(f"Error displaying target device info: {e}")

#/////////////////////////////////////////////////////////////////////////////////////



    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_target_name() ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÅ‡∏õ‡∏•‡∏á UUID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‚ÄúA1‚Äù, ‚ÄúA2‚Äù 
     # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô UI ‡∏´‡∏£‡∏∑‡∏≠ log ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏≤ major ‡∏°‡∏≤‡∏Å‡∏ô‡∏±‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏ô iPhone ‡∏Ñ‡πà‡∏≤ major ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏™‡∏°‡∏≠

    def get_target_name(self, uuid, major):
        """‡πÅ‡∏õ‡∏•‡∏á UUID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Anchor (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à major ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ iPhone ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0)"""
        try:
            if uuid.upper() == "A7E39D7510F2FE254DAE4230DBC6C3A4":
                return f"A1 (Major: {major})"
            elif uuid.upper() == "D8AC484E4FBB4B36BF12C249AB83673B":
                return f"A2 (Major: {major})"
            else:
                return f"Unknown (Major: {major})"
        except:
            return "Unknown"

#/////////////////////////////////////////////////////////////////////////////////////
        

        
#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô auto_connect_gatt() ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT (Generic Attribute Profile) 
# ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Bluetooth ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô target ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤

    def auto_connect_gatt(self, uuid):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö target device"""
        try:
            if isinstance(uuid, bytes):
                uuid = uuid.decode('utf-8')
            uuid = uuid.upper()

            Logger.info(f"üîó Starting auto GATT connection to: {uuid[:8]}...")
            
            self.bridge.startConnectionForDevice_(objc_str(uuid))
            self.gatt_connected = True
            
            Clock.schedule_once(lambda dt: self.check_auto_connection_status(uuid), 3.0)
            
            Logger.info("‚úÖ Auto GATT connection initiated")
            
        except Exception as e:
            Logger.error(f"‚ùå Auto GATT connection failed: {e}")
            self.root.ids.status.text = f"GATT Error: {str(e)[:30]}..."

#/////////////////////////////////////////////////////////////////////////////////////


#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô check_auto_connection_status() ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (GATT)
#  ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á (‡∏°‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å auto_connect_gatt() ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

    def check_auto_connection_status(self, uuid):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        try:
            is_connected = self.bridge.isDeviceConnected_(objc_str(uuid))
            connection_state = self.bridge.getConnectionState(objc_str(uuid))
            
            Logger.info(f"Auto Connection Status: {connection_state}, Connected: {is_connected}")
            
            if is_connected:
                Logger.info("‚úÖ Auto GATT connection successful!")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° Real-time RSSI monitoring
                self.start_auto_rssi_monitoring()
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status
                self.root.ids.status.text = "GATT Connected - Monitoring RSSI"
                self.root.ids.status2.text = "GATT Connected - Monitoring RSSI"
                
            else:
                Logger.warning("‚ùå Auto GATT connection failed")
                self.gatt_connected = False
                self.root.ids.status.text = f"GATT Failed: {connection_state}"
                self.root.ids.status2.text = f"GATT Failed: {connection_state}"
                
        except Exception as e:
            Logger.error(f"Error checking auto connection status: {e}")

#/////////////////////////////////////////////////////////////////////////////////////
