from pyobjus import autoclass, objc_str
from pyobjus.dylib_manager import load_framework, INCLUDE

import kivy
from kivy.app import App
from kivy.clock import Clock, mainthread
from kivy.logger import Logger
from kivy.lang import Builder
from kivymd.app import MDApp
from kivy.metrics import dp
from kivymd.uix.list import OneLineListItem
from kivymd.uix.dialog import MDDialog
from kivymd.uix.button import MDFlatButton, MDRaisedButton

import time

load_framework(INCLUDE.Foundation)

BluetoothBridge = autoclass('BluetoothBridge')
NSDictionary = autoclass('NSDictionary')
NSData = autoclass('NSData')

KV = '''
<DeviceListItem@OneLineListItem>:
    device_uuid: ""
    device_name: ""
    device_rssi: 0
    
    text: f"{self.device_name} (RSSI: {self.device_rssi})"
    on_release: app.on_device_selected(self.device_uuid, self.device_name)

MDBoxLayout:
    orientation: "vertical"

    MDTopAppBar:
        title: "Bluetooth Scanner"
        right_action_items: [["theme-light-dark", lambda x: app.switch_theme_style()], ["exit-to-app", lambda x: app.close_application()]]

    MDBottomNavigation:

        MDBottomNavigationItem:
            name: 'scanner'
            text: 'Scanner'
            icon: 'bluetooth'

            MDBoxLayout:
                orientation: "vertical"
                spacing: dp(10)
                padding: dp(20)

                MDLabel:
                    text: "Bluetooth Device Scanner"
                    size_hint_y: None
                    height: dp(40)
                    halign: "center"
                    bold: True
                    font_style: "H5"

                MDCard:
                    size_hint_y: None
                    height: dp(250)
                    md_bg_color: 1, 0.8, 0.6, 1
                    
                    AnchorLayout:
                        anchor_x: "center"
                        anchor_y: "center"
                        
                        MDLabel:
                            id: scan_status
                            text: "Press 'Start Scan' to discover devices"
                            font_size: "12sp"
                            size: self.texture_size
                            halign: "center"
                        ScrollView:
                            size_hint: 1, 1
                            do_scroll_x: False
                            do_scroll_y: True
                            bar_width: dp(4)
                            MDList:
                                id: device_list
                                size_hint_y: None
                                height: self.minimum_height
                MDRaisedButton:
                    text: "Start Scan"
                    
                    on_press: app.start_scan(self)
                    


                MDRaisedButton:
                    text: "Stop Scan"
                    on_press: app.stop_bluetooth_scan()

                MDRaisedButton:
                    text: "Clear List"
                    on_press: app.clear_device_list()

        MDBottomNavigationItem:
            name: 'connection'
            text: 'Connection'
            icon: 'bluetooth-connect'

            MDBoxLayout:
                orientation: "vertical"
                spacing: dp(20)
                padding: dp(20)

                MDLabel:
                    text: "Device Connection"
                    size_hint_y: None
                    height: dp(40)
                    halign: "center"
                    bold: True
                    font_style: "H5"

                MDCard:
                    size_hint_y: None
                    height: dp(200)
                    md_bg_color: app.theme_cls.primary_light

                    MDLabel:
                        id: connection_status
                        text: "No device selected"
                        halign: "center"
                        valign: "center"

                MDBoxLayout:
                    orientation: "horizontal"
                    spacing: dp(10)
                    size_hint_y: None
                    height: dp(50)

                    MDRaisedButton:
                        text: "Connect GATT"
                        on_press: app.connect_to_selected_device()

                    MDRaisedButton:
                        text: "Disconnect"
                        on_press: app.disconnect_from_device()

        MDBottomNavigationItem:
            name: 'info'
            text: 'Info'
            icon: 'information'

            MDCard:
                md_bg_color: app.theme_cls.primary_light
                size_hint: 0.8, 0.6
                pos_hint: {"center_x": .5, "center_y": .5}

                MDLabel:
                    text: "Bluetooth GATT Scanner\\n\\nFeatures:\\n‚Ä¢ Unique device detection\\n‚Ä¢ Click device to connect\\n‚Ä¢ Real-time RSSI monitoring"
                    halign: "center"
                    valign: "center"
'''



class BluetoothGATTApp(MDApp):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # ‚úÖ Data attributes - ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö UI
        self.bridge = None
        self.discovered_devices = {}  # UUID ‡πÄ‡∏õ‡πá‡∏ô key
        self.selected_device_uuid = None
        self.current_device_uuid = None
        self.selected_device_name = None
        self.is_scanning = False
        self.label = None
        self.is_connected = False
        
        # ‚úÖ UI references - ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ
        self.scan_status_label = None
        self.connection_status_label = None
        self.device_list_widget = None
        
    def build(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° references"""
        root = Builder.load_string(KV)
        
        # ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° UI references
        self.scan_status_label = root.ids.scan_status
        self.connection_status_label = root.ids.connection_status
        self.device_list_widget = root.ids.device_list
        
        # ‚úÖ Initialize Bluetooth
        self.initialize_bluetooth()
        
        return root
    
    def initialize_bluetooth(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bluetooth bridge"""
        try:
            self.bridge = BluetoothBridge.alloc().init()
            Logger.info("‚úÖ BluetoothBridge initialized successfully")
            self.update_scan_status("‚úÖ Bluetooth ready - Press 'Start Scan'")
        except Exception as e:
            Logger.error(f"‚ùå Failed to initialize BluetoothBridge: {e}")
            self.update_scan_status("‚ùå Bluetooth initialization failed")

    # ‚úÖ ========== BLUETOOTH LOGIC METHODS ==========
    
    def start_bluetooth_scan(self, instance=None):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ scan ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
        if not self.bridge:
            self.update_scan_status("‚ùå Bluetooth not initialized")
            return
            
        Logger.info("üîç Starting Bluetooth scan...")
        
        try:
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            self.clear_discovered_devices()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° scan ‡πÉ‡∏ô Swift
            self.bridge.performFullDeviceScan()
            self.is_scanning = True
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
            self.update_scan_status("üîç Scanning for devices...")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° polling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö devices ‡πÉ‡∏´‡∏°‡πà
            Clock.schedule_interval(self.poll_discovered_devices, 1.5)
            
        except Exception as e:
            Logger.error(f"‚ùå Error starting scan: {e}")
            self.update_scan_status(f"‚ùå Scan error: {e}")

    def stop_bluetooth_scan(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ scan"""
        if not self.bridge:
            return
            
        try:
            self.bridge.stopBluetoothScan()
            self.is_scanning = False
            
            # ‡∏´‡∏¢‡∏∏‡∏î polling
            Clock.unschedule(self.poll_discovered_devices)
            
            device_count = len(self.discovered_devices)
            self.update_scan_status(f"üõë Scan stopped - Found {device_count} unique devices")
            
            Logger.info(f"üõë Bluetooth scan stopped, found {device_count} devices")
            
        except Exception as e:
            Logger.error(f"‚ùå Error stopping scan: {e}")

    def poll_discovered_devices(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö devices ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Swift"""
        if not self.bridge or not self.is_scanning:
            return False
            
        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Swift
            devices_array = self.bridge.getUniqueDevices()
            current_count = self.bridge.getUniqueDevicesCount()
            
            # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ device ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if current_count > len(self.discovered_devices):
                self.process_new_devices(devices_array)
                self.update_scan_status(f"üîç Scanning... Found {current_count} unique devices")
            
        except Exception as e:
            Logger.error(f"‚ùå Error polling devices: {e}")
        
        return True  # Continue polling

    def process_new_devices(self, devices_array):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• devices ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Swift"""
        try:
            for i in range(devices_array.count()):
                device_dict = devices_array.objectAtIndex_(i)
                
                # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å NSDictionary ‡πÄ‡∏õ‡πá‡∏ô Python dict
                device_data = self.convert_nsdict_to_python(device_dict)
                
                # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô device ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                device_uuid = device_data.get('uuid')
                if device_uuid and device_uuid not in self.discovered_devices:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° device ‡πÉ‡∏´‡∏°‡πà
                    self.add_new_device(device_data)
                    
        except Exception as e:
            Logger.error(f"‚ùå Error processing new devices: {e}")

    def convert_nsdict_to_python(self, ns_dict):
        """‡πÅ‡∏õ‡∏•‡∏á NSDictionary ‡πÄ‡∏õ‡πá‡∏ô Python dict"""
        try:
            name = ns_dict.objectForKey_(objc_str("name"))
            uuid = ns_dict.objectForKey_(objc_str("uuid"))
            rssi = ns_dict.objectForKey_(objc_str("rssi"))
            major = ns_dict.objectForKey_(objc_str("major"))
            minor = ns_dict.objectForKey_(objc_str("minor"))
            timestamp = ns_dict.objectForKey_(objc_str("timestamp"))

            return {
                "name": name.UTF8String() if name else "Unknown Device",
                "uuid": uuid.UTF8String() if uuid else None,
                "rssi": rssi.intValue() if rssi else -999,
                "major": major.intValue() if major else 0,
                "minor": minor.intValue() if minor else 0,
                "timestamp": timestamp.doubleValue() if timestamp else 0
            }
        except Exception as e:
            Logger.error(f"‚ùå Error converting NSDictionary: {e}")
            return {}

    def add_new_device(self, device_data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° device ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"""
        device_uuid = device_data.get('uuid')
        if not device_uuid:
            return
            
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Python dict
        self.discovered_devices[device_uuid] = device_data
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ UI
        self.add_device_to_ui(device_data)
        
        Logger.info(f"üì± Added new device: {device_data['name']} ({device_uuid[:8]}...)")

    def clear_discovered_devices(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• devices ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # ‡∏•‡πâ‡∏≤‡∏á Python data
        self.discovered_devices.clear()
        
        # ‡∏•‡πâ‡∏≤‡∏á Swift data
        if self.bridge:
            self.bridge.clearUniqueDevices()
        
        # ‡∏•‡πâ‡∏≤‡∏á UI
        self.clear_device_list_ui()
        
        Logger.info("üóëÔ∏è All devices cleared")

    def connect_to_selected_device(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö device ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if not self.selected_device_uuid or not self.bridge:
            self.update_connection_status("‚ùå No device selected")
            return
            
        Logger.info(f"üîÑ Connecting to: {self.selected_device_name}")
        
        try:
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô Swift
            success = self.bridge.connectToDeviceWithUUID_(objc_str(self.selected_device_uuid))
            
            if success:
                self.update_connection_status(f"üîÑ Connecting to {self.selected_device_name}...")
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                Clock.schedule_once(self.check_connection_result, 3.0)
            else:
                self.update_connection_status("‚ùå Failed to initiate connection")
                
        except Exception as e:
            Logger.error(f"‚ùå Connection error: {e}")
            self.update_connection_status(f"‚ùå Connection error: {e}")

    def check_connection_result(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if not self.selected_device_uuid or not self.bridge:
            return
            
        try:
            is_connected = self.bridge.isDeviceConnected_(objc_str(self.selected_device_uuid))
            connection_state = self.bridge.getConnectionStateForDevice_(objc_str(self.selected_device_uuid))
            
            if is_connected:
                self.is_connected = True
                connection_info = f"‚úÖ Connected to {self.selected_device_name}\n"
                connection_info += f"UUID: {self.selected_device_uuid[:8]}...\n"
                connection_info += f"State: {connection_state}"
                self.update_connection_status(connection_info)
                
                Logger.info(f"‚úÖ Successfully connected to {self.selected_device_name}")
            else:
                self.update_connection_status(f"‚ùå Connection failed\nState: {connection_state}")
                Logger.warning(f"‚ùå Connection failed: {connection_state}")
                
        except Exception as e:
            Logger.error(f"‚ùå Error checking connection: {e}")
            self.update_connection_status(f"‚ùå Connection check failed")

    def disconnect_from_device(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å device"""
        if not self.selected_device_uuid or not self.bridge:
            self.update_connection_status("‚ùå No device to disconnect")
            return
            
        try:
            self.bridge.disconnectPeripheralWith_(objc_str(self.selected_device_uuid))
            self.is_connected = False
            
            self.update_connection_status(f"üîå Disconnected from {self.selected_device_name}")
            Logger.info(f"üîå Disconnected from {self.selected_device_name}")
            
        except Exception as e:
            Logger.error(f"‚ùå Disconnect error: {e}")
            self.update_connection_status(f"‚ùå Disconnect error")

    def check_disconnection_result(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if not self.selected_device_uuid or not self.bridge:
            return
            
        try:
            is_connected = self.bridge.isDeviceConnected_(objc_str(self.selected_device_uuid))
            
            if not is_connected:
                self.is_connected = False
                connection_info = f"‚úÖ Disconnected from {self.selected_device_name}\n"
                connection_info += f"UUID: {self.selected_device_uuid[:8]}..."
                self.update_connection_status(connection_info)
                
                Logger.info(f"‚úÖ Successfully disconnected from {self.selected_device_name}")
            else:
                self.update_connection_status("‚ùå Disconnection failed")
                
        except Exception as e:
            Logger.error(f"‚ùå Error checking disconnection: {e}")
            self.update_connection_status(f"‚ùå Error checking disconnection: {e}")

    # ‚úÖ ========== UI UPDATE METHODS ==========
    
    @mainthread
    def update_scan_status(self, message):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó scan status ‡πÉ‡∏ô UI"""
        if self.scan_status_label:
            self.scan_status_label.text = message
        Logger.info(f"Scan Status: {message}")

    @mainthread
    def update_connection_status(self, message):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó connection status ‡πÉ‡∏ô UI"""
        if self.connection_status_label:
            self.connection_status_label.text = message
        Logger.info(f"Connection Status: {message}")

    @mainthread
    def add_device_to_ui(self, device_data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° device ‡πÄ‡∏Ç‡πâ‡∏≤ UI list"""
        if not self.device_list_widget:
            return
            
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á list item
            device_text = f"üì± {device_data['name']}\nüÜî {device_data['uuid'][:8]}... | üì∂ {device_data['rssi']} dBm"
            
            device_item = OneLineListItem(
                text=device_text,
                on_release=lambda x: self.on_device_selected(device_data['uuid'], device_data['name'])
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ list
            self.device_list_widget.add_widget(device_item)
            
        except Exception as e:
            Logger.error(f"‚ùå Error adding device to UI: {e}")

    @mainthread
    def clear_device_list_ui(self):
        """‡∏•‡πâ‡∏≤‡∏á device list ‡πÉ‡∏ô UI"""
        if self.device_list_widget:
            self.device_list_widget.clear_widgets()

    def clear_device_list(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ devices (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å UI)"""
        self.clear_discovered_devices()
        self.update_scan_status("üóëÔ∏è Device list cleared")

    # ‚úÖ ========== EVENT HANDLERS ==========
    
    def on_device_selected(self, device_uuid, device_name):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å device"""
        Logger.info(f"üì± Device selected: {device_name} ({device_uuid})")
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.selected_device_uuid = device_uuid
        self.selected_device_name = device_name
        
        # ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        self.show_connection_dialog(device_name, device_uuid)

    def show_connection_dialog(self, device_name, device_uuid):
        """‡πÅ‡∏™‡∏î‡∏á dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        dialog_text = f"Connect to device?\n\n"
        dialog_text += f"Name: {device_name}\n"
        dialog_text += f"UUID: {device_uuid[:8]}...\n"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å discovered_devices
        device_data = self.discovered_devices.get(device_uuid)
        if device_data:
            dialog_text += f"RSSI: {device_data['rssi']} dBm\n"
            dialog_text += f"Major: {device_data['major']} | Minor: {device_data['minor']}"

        dialog = MDDialog(
            title="Connect to Device",
            text=dialog_text,
            buttons=[
                MDFlatButton(
                    text="CANCEL",
                    on_release=lambda x: dialog.dismiss()
                ),
                MDRaisedButton(
                    text="CONNECT",
                    on_release=lambda x: self.confirm_connection(dialog)
                ),
            ],
        )
        dialog.open()

    def confirm_connection(self, dialog):
        """‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        dialog.dismiss()
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó connection status
        connection_info = f"üì± Selected: {self.selected_device_name}\n"
        connection_info += f"üÜî UUID: {self.selected_device_uuid[:8]}...\n"
        connection_info += f"üì∂ Ready to connect"
        
        self.update_connection_status(connection_info)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        self.connect_to_selected_device()

    # ‚úÖ ========== UTILITY METHODS ==========
    
    def get_device_by_uuid(self, uuid):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device ‡∏à‡∏≤‡∏Å UUID"""
        return self.discovered_devices.get(uuid)

    def get_discovered_device_count(self):
        """‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô devices ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠"""
        return len(self.discovered_devices)

    def get_all_discovered_devices(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ devices ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return list(self.discovered_devices.values())

    def is_device_discovered(self, uuid):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ device ‡∏ñ‡∏π‡∏Å‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return uuid in self.discovered_devices

    def get_connection_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not self.selected_device_uuid:
            return {"status": "no_device_selected"}
            
        return {
            "uuid": self.selected_device_uuid,
            "name": self.selected_device_name,
            "is_connected": self.is_connected,
            "device_data": self.get_device_by_uuid(self.selected_device_uuid)
        }

    # ‚úÖ ========== APP LIFECYCLE METHODS ==========
    
    def switch_theme_style(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏ò‡∏µ‡∏°"""
        self.theme_cls.theme_style = "Dark" if self.theme_cls.theme_style == "Light" else "Light"
        Logger.info(f"Theme switched to: {self.theme_cls.theme_style}")

    def close_application(self):
        """‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
        Logger.info("üî¥ Application closing...")
        self.stop()

    def on_stop(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        Logger.info("üî¥ BluetoothGATTApp stopping...")
        
        try:
            # ‡∏´‡∏¢‡∏∏‡∏î scan ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if self.is_scanning:
                self.stop_bluetooth_scan()
            
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
            if self.is_connected:
                self.disconnect_from_device()
            
            # ‡∏´‡∏¢‡∏∏‡∏î Clock schedules
            Clock.unschedule(self.poll_discovered_devices)
            Clock.unschedule(self.check_connection_result)
            
            Logger.info("‚úÖ BluetoothGATTApp stopped cleanly")
            
        except Exception as e:
            Logger.error(f"‚ùå Error during app shutdown: {e}")

    # ‚úÖ ========== DEBUG METHODS ==========
    
    def print_discovered_devices(self):
        """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ devices ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"""
        Logger.info(f"üì± Discovered Devices ({len(self.discovered_devices)}):")
        for uuid, device in self.discovered_devices.items():
            Logger.info(f"  - {device['name']} | {uuid[:8]}... | {device['rssi']} dBm")

    def get_app_status(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"""
        return {
            "bluetooth_initialized": self.bridge is not None,
            "is_scanning": self.is_scanning,
            "discovered_count": len(self.discovered_devices),
            "selected_device": self.selected_device_name,
            "is_connected": self.is_connected,
            "ui_references": {
                "scan_status": self.scan_status_label is not None,
                "connection_status": self.connection_status_label is not None,
                "device_list": self.device_list_widget is not None
            }
        }

    def start_scan(self, instance):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° scan ‡∏´‡∏≤ devices"""
        Logger.info("BluetoothGATTApp: Starting full device scan...")
        
        # ‡πÉ‡∏ä‡πâ method ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ cleanup
        self.bridge.performFullDeviceScan()
        self.update_label("Scanning for devices...")
        Clock.schedule_interval(self.check_discovered_device, 1.0)
    
        
    def connect_gatt(self, instance):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT ‡∏Å‡∏±‡∏ö device ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        if self.current_device_uuid:
            Logger.info(f"BluetoothGATTApp: Connecting GATT to device: {self.current_device_uuid}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ GATT connection method ‡πÉ‡∏´‡∏°‡πà
            self.bridge.startConnectionForDevice_(objc_str(self.current_device_uuid))
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° periodic RSSI updates
            self.bridge.startPeriodicRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
            
            self.gatt_connected = True
            self.update_label(f"GATT Connecting...\nDevice: {self.current_device_uuid}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            Clock.schedule_once(self.check_connection_status, 3.0)
            self.bridge.stopBluetoothScan()
        else:
            self.update_label("No device found to connect GATT")

    def check_connection_status(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GATT"""
        if self.current_device_uuid:
            try:
                is_connected = self.bridge.isDeviceConnected_(objc_str(self.current_device_uuid))
                connection_state = self.bridge.getConnectionStateForDevice_(objc_str(self.current_device_uuid))
                
                Logger.info(f"Connection Status: {connection_state}, Connected: {is_connected}")
                
                if is_connected:
                    # ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤
                    
                    
                    self.update_label(f"‚úÖ GATT Connected!\nDevice: {self.current_device_uuid[:8]}...\nState: {connection_state}\n")
                    Clock.schedule_once(lambda dt: self.get_available_services(), 1.0)
                else:
                    self.update_label(f"‚ùå GATT Connection Failed\nState: {connection_state}")
                    
            except Exception as e:
                Logger.error(f"Error checking connection status: {e}")
                self.update_label(f"Connection check failed: {e}")

    def get_available_services(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ services ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô device"""
        if self.current_device_uuid:
            try:
                # ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà return [String]
                # service_uuids = self.bridge.getAvailableServicesForDevice_(objc_str(self.current_device_uuid))
                #service_names = self.bridge.getAvailableServicesWithNames_(objc_str(self.current_device_uuid))
                
                
                
                Logger.info(f"Service UUIDs: {service_uuids}")
               # Logger.info(f"Service Names: {service_names}")
                

            except Exception as e:
                Logger.error(f"Error getting services: {e}")
                self.update_label(f"Error getting services: {e}")
###############################################################
    def get_detailed_services(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• services ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        if self.current_device_uuid:
            try:
                # ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà return string
                services_string = self.bridge.getAvailableServicesString_(objc_str(self.current_device_uuid))
                
                if services_string:
                    self.update_label(f"üìã Available Services:\n\n{services_string}")
                else:
                    self.update_label("No services available")
                    
            except Exception as e:
                Logger.error(f"Error getting detailed services: {e}")

    def display_service_details(self, instance):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î services"""
        if self.current_device_uuid:
            try:
                # ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà return formatted string
                services_string = self.bridge.getAvailableServicesString_(objc_str(self.current_device_uuid))
                
                if services_string:
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô popup ‡∏´‡∏£‡∏∑‡∏≠ label ‡πÉ‡∏´‡∏°‡πà
                    self.update_label(f"üìã Service Details:\n\n{services_string}")
                    
                    # Schedule ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    Clock.schedule_once(lambda dt: self.get_available_services(), 10.0)
                else:
                    self.update_label("No service details available")
                    
            except Exception as e:
                Logger.error(f"Error displaying service details: {e}")
###############################################################
    def read_characteristic_data(self, instance):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å characteristic"""
        if not self.gatt_connected or not self.current_device_uuid:
            self.update_label("Please connect GATT first")
            return
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Battery Service
        service_uuid = "180F"  # Battery Service
        characteristic_uuid = "2A19"  # Battery Level Characteristic
        
        Logger.info(f"Reading characteristic {characteristic_uuid} from service {service_uuid}")
        
        try:
            self.bridge.readCharacteristicForDevice_serviceUUID_characteristicUUID_(
                objc_str(self.current_device_uuid),
                objc_str(service_uuid),
                objc_str(characteristic_uuid)
            )
            
            self.update_label(f"Reading battery level...\nService: {service_uuid}\nCharacteristic: {characteristic_uuid}")
            
        except Exception as e:
            Logger.error(f"Error reading characteristic: {e}")
            self.update_label(f"Error reading data: {e}")

    def write_characteristic_data(self, instance):
        """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ characteristic"""
        if not self.gatt_connected or not self.current_device_uuid:
            self.update_label("Please connect GATT first")
            return
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• string
        service_uuid = "FF10"  # Custom Service UUID
        characteristic_uuid = "FF11"  # Custom Characteristic UUID
        data_to_write = "Hello IoT Device!"
        
        Logger.info(f"Writing data: {data_to_write}")
        
        try:
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö string
            self.bridge.writeStringData_toDevice_serviceUUID_characteristicUUID_(
                objc_str(data_to_write),
                objc_str(self.current_device_uuid),
                objc_str(service_uuid),
                objc_str(characteristic_uuid)
            )
            
            self.update_label(f"Writing data: {data_to_write}\nTo service: {service_uuid}")
            
        except Exception as e:
            Logger.error(f"Error writing data: {e}")
            self.update_label(f"Error writing data: {e}")

    def write_hex_data_example(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hex"""
        if not self.gatt_connected or not self.current_device_uuid:
            return
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hex (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED)
        service_uuid = "FF20"
        characteristic_uuid = "FF21"
        hex_data = "FF0000"  # Red color in RGB hex
        
        try:
            self.bridge.writeHexData_toDevice_serviceUUID_characteristicUUID_(
                hex_data,
                self.current_device_uuid,
                service_uuid,
                characteristic_uuid
            )
            
            Logger.info(f"Wrote hex data: {hex_data}")
            
        except Exception as e:
            Logger.error(f"Error writing hex data: {e}")

    def get_detailed_device_info(self, instance):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        if self.current_device_uuid:
            try:
                # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method
                detailed_info = self.bridge.getDetailedDeviceInfo_(objc_str(self.current_device_uuid))
                
                if detailed_info:
                    name = detailed_info.objectForKey_(objc_str("name"))
                    state = detailed_info.objectForKey_(objc_str("state"))
                    services = detailed_info.objectForKey_(objc_str("services"))
                    characteristics = detailed_info.objectForKey_(objc_str("characteristics"))
                  
                    char_count = detailed_info.objectForKey_(objc_str("characteristicCount"))
                    
                    info_text = f"Device: {name}\n"
                    info_text += f"State: {state}\n"
                    
                    if services:
                        info_text += f"Services: {len(services)}\n"
                        for i, service in enumerate(services[:3]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 services ‡πÅ‡∏£‡∏Å
                            service_uuid = service.objectForKey_(objc_str("uuid"))
                            info_text += f"  - {service_uuid}\n"
                    
                    if characteristics:
                        info_text += f"Characteristics: {len(characteristics)}"
                    
                    self.update_label(info_text)
                    Logger.info(f"Detailed device info displayed successfully")
                    
                else:
                    self.update_label("No detailed info available")
                    Logger.warning("No detailed device info returned")
                    
            except Exception as e:
                Logger.error(f"Error getting detailed info: {e}")
                self.update_label(f"Error: {e}")
        else:
            self.update_label("No device selected")

    def get_system_status(self, instance):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            status = self.bridge.getFullSystemStatus()
            
            if status:
                is_scanning = status.objectForKey_(objc_str("isScanning"))
                connected_count = status.objectForKey_(objc_str("connectedDevicesCount"))
                total_discovered = status.objectForKey_(objc_str("totalDiscoveredDevices"))
                bluetooth_state = status.objectForKey_(objc_str("bluetoothState"))
                
                status_text = f"System Status:\n"
                status_text += f"Scanning: {bool(is_scanning.boolValue())}\n"
                status_text += f"Connected: {connected_count.intValue()}\n"
                status_text += f"Discovered: {total_discovered.intValue()}\n"
                status_text += f"Bluetooth: {bluetooth_state}\n"
                
                if self.current_device_uuid:
                    device_state = self.bridge.getConnectionStateForDevice_(objc_str(self.current_device_uuid))
                    status_text += f"Current Device: {device_state}"
                
                self.update_label(status_text)
                Logger.info("System status displayed successfully")
            else:
                self.update_label("Unable to get system status")
                Logger.warning("No system status returned")
                
        except Exception as e:
            Logger.error(f"Error getting system status: {e}")
            self.update_label(f"Status Error: {e}")

    @mainthread
    def update_label(self, text):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó label text"""
        self.root.ids.scan_status.text = text

    @mainthread
    def check_discovered_device(self, dt):
        """‡πÄ‡∏ä‡πá‡∏Ñ device ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡∏°‡πà"""
        device = self.bridge.getLastDiscoveredDevice()
        if device:
            name = device.objectForKey_(objc_str("name")).UTF8String()
            uuid = device.objectForKey_(objc_str("uuid")).UTF8String()
            rssi = device.objectForKey_(objc_str("rssi")).intValue()
            major = device.objectForKey_(objc_str("major")).intValue()
            minor = device.objectForKey_(objc_str("minor")).intValue()

             # ‡πÄ‡∏Å‡πá‡∏ö UUID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó discovered devices list (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
        if not hasattr(self, 'discovered_devices_list'):
            self.discovered_devices_list = {}
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        self.discovered_devices_list[uuid] = {
            'name': name,
            'uuid': uuid,
            'rssi': rssi
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á display text ‡πÄ‡∏õ‡πá‡∏ô list ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß)
        display_text = "üì± Devices:\n"
        display_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 devices ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
        device_items = list(self.discovered_devices_list.items())
        max_display = 4  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 4 devices
        
        for i, (device_uuid, device_info) in enumerate(device_items[-max_display:], 1):
            display_text += f"[{i}] {device_info['name'][:12]}...\n"  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠ 12 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            display_text += f"UUID: {device_info['uuid'][:8]}...\n"
            display_text += f"RSSI: {device_info['rssi']} dBm\n"
            display_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if len(self.discovered_devices_list) > max_display:
            display_text += f"...‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(self.discovered_devices_list) - max_display} devices\n"
        
        display_text += f"Total: {len(self.discovered_devices_list)}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GATT
        if hasattr(self, 'gatt_connected') and self.gatt_connected:
            connection_state = self.bridge.getConnectionStateForDevice_(objc_str(uuid))
            display_text += f"\nGATT: {connection_state}"
        else:
            display_text += f"\nGATT: Not Connected"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        connected_count = self.bridge.getConnectedDevicesCount()
        
        self.update_scan_status(display_text)
    
    def on_stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î app"""
        Logger.info("BluetoothGATTApp: Stopping...")
        
        # ‡∏´‡∏¢‡∏∏‡∏î RSSI monitoring
        if hasattr(self, 'rssi_monitoring') and self.rssi_monitoring:
            self.stop_rssi_monitoring()  # ‚Üê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á parameter
        
        # ‡∏´‡∏¢‡∏∏‡∏î RSSI updates
        if self.current_device_uuid:
            try:
                self.bridge.stopPeriodicRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
            except Exception as e:
                Logger.error(f"Error stopping RSSI updates: {e}")
        
        Logger.info("BluetoothGATTApp: Stopped and cleaned up")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    def test_all_gatt_methods(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö GATT methods ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        Logger.info("BluetoothGATTApp: Testing all GATT methods...")
        
        if not self.current_device_uuid:
            Logger.warning("No device available for testing")
            return
        
        try:
            # Test 1: Validate UUID
            is_valid = self.bridge.validateUUID_(self.current_device_uuid)
            Logger.info(f"‚úÖ UUID Validation: {is_valid}")
            
            # Test 2: Check connection state
            state = self.bridge.getConnectionStateForDevice_(self.current_device_uuid)
            Logger.info(f"‚úÖ Connection State: {state}")
            
            # Test 3: Get detailed device info
            detailed_info = self.bridge.getDetailedDeviceInfoForUUID_(self.current_device_uuid)
            Logger.info(f"‚úÖ Detailed Info Available: {detailed_info is not None}")
            
            # Test 4: Get system status
            system_status = self.bridge.getFullSystemStatus()
            Logger.info(f"‚úÖ System Status Available: {system_status is not None}")
            
            Logger.info("‚úÖ All GATT methods tested successfully")
            return True
            
        except Exception as e:
            Logger.error(f"‚ùå GATT method test failed: {e}")
            return False

    def connect_and_read_battery(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô battery level"""
        if not self.current_device_uuid:
            self.update_label("No device available")
            return
        
        Logger.info("Starting battery reading process...")
        
        # Step 1: Connect GATT
        self.bridge.startConnectionForDevice_(self.current_device_uuid)
        self.update_label("Connecting GATT...")
        
        # Step 2: Schedule battery reading after connection
        Clock.schedule_once(self.read_battery_level, 3.0)

    def read_battery_level(self, dt):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ battery level"""
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ battery ‡∏à‡∏≤‡∏Å standard Battery Service
            self.bridge.readCharacteristicForDevice_serviceUUID_characteristicUUID_(
                self.current_device_uuid,
                "180F",  # Battery Service UUID
                "2A19"   # Battery Level Characteristic UUID
            )
            
            self.update_label("Reading battery level...")
            Logger.info("Battery level read request sent")
            
        except Exception as e:
            Logger.error(f"Error reading battery: {e}")
            self.update_label(f"Battery read error: {e}")

    def send_custom_command(self, command_data):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
        if not self.gatt_connected or not self.current_device_uuid:
            Logger.warning("GATT not connected")
            return
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á custom service
        custom_service_uuid = "12345678-1234-1234-1234-123456789ABC"
        command_characteristic_uuid = "87654321-4321-4321-4321-CBA987654321"
        
        try:
            if isinstance(command_data, str):
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö string
                self.bridge.writeStringData_toDevice_serviceUUID_characteristicUUID_(
                    command_data,
                    self.current_device_uuid,
                    custom_service_uuid,
                    command_characteristic_uuid
                )
            else:
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö hex
                self.bridge.writeHexData_toDevice_serviceUUID_characteristicUUID_(
                    command_data,
                    self.current_device_uuid,
                    custom_service_uuid,
                    command_characteristic_uuid
                )
            
            Logger.info(f"Custom command sent: {command_data}")
            
        except Exception as e:
            Logger.error(f"Error sending custom command: {e}")

    def monitor_device_continuously(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        if self.current_device_uuid:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° periodic monitoring
            Clock.schedule_interval(self.update_device_status, 2.0)
            Logger.info("Started continuous device monitoring")

    def update_device_status(self, dt):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
        if not self.current_device_uuid:
            return
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            is_connected = self.bridge.isDeviceConnected_(objc_str(self.current_device_uuid))
            connection_state = self.bridge.getConnectionStateForDevice_(objc_str(self.current_device_uuid))
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RSSI ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_rssi = self.bridge.getCurrentRSSIForDevice_(objc_str(self.current_device_uuid))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
            status_text = f"Device Monitoring:\n"
            status_text += f"Connected: {is_connected}\n"
            status_text += f"State: {connection_state}\n"
            status_text += f"RSSI: {current_rssi} dBm\n"
            status_text += f"UUID: {self.current_device_uuid[:8]}..."
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not is_connected and self.gatt_connected:
                Logger.warning("Device disconnected unexpectedly")
                self.gatt_connected = False
                status_text += "\n‚ö†Ô∏è Connection Lost!"
            
            self.update_label(status_text)
            
        except Exception as e:
            Logger.error(f"Error updating device status: {e}")
##################################################################################################################################
    
  ####################***--‡∏´‡∏•‡∏±‡∏Å Reconnect Method--#############################################
    def reconnect_device(self, instance):
        """Reconnect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if not self.current_device_uuid:
            self.update_label("‚ùå No device to reconnect")
            Logger.warning("No device UUID for reconnection")
            return
        
        try:
            Logger.info(f"üîÑ Attempting to reconnect to device: {self.current_device_uuid}")
            
            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Swift reconnect method
            self.bridge.reconnectToDeviceWithUUID_(objc_str(self.current_device_uuid))
            
            self.update_label(f"üîÑ Reconnecting...\nDevice: {self.current_device_uuid[:8]}...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ reconnect ‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            Clock.schedule_once(self.check_reconnect_result, 3.0)
            
        except Exception as e:
            Logger.error(f"‚ùå Reconnect error: {e}")
            self.update_label(f"Reconnect Error: {e}")
###############################################################################################


####################***-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏• Reconnect--#################################################
    def check_reconnect_result(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ reconnect"""
        if not self.current_device_uuid:
            return
        
        try:
            is_connected = self.bridge.isDeviceConnected_(objc_str(self.current_device_uuid))
            connection_state = self.bridge.getConnectionStateForDevice_(objc_str(self.current_device_uuid))
            
            if is_connected:
                self.gatt_connected = True
                self.update_label(f"‚úÖ Reconnect Successful!\nDevice: {self.current_device_uuid[:8]}...\nState: {connection_state}")
                Logger.info("‚úÖ Device reconnected successfully")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° RSSI updates ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                self.bridge.startPeriodicRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
                
            else:
                self.update_label(f"‚ùå Reconnect Failed\nState: {connection_state}\nTrying again...")
                Logger.warning("‚ùå Reconnect failed, will retry")
                
                # ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                Clock.schedule_once(lambda dt: self.reconnect_device(None), 2.0)
                
        except Exception as e:
            Logger.error(f"Error checking reconnect result: {e}")
    ###############################################################################################


####################***-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Auto Reconnect--#################################################
    def setup_auto_reconnect(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auto reconnect"""
        try:
            # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ auto reconnect ‡πÉ‡∏ô Swift
            self.bridge.setAutoReconnectEnabled_(True)
            
            # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            self.bridge.setMaxReconnectAttempts_(5)  # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            
            Logger.info("‚úÖ Auto reconnect enabled with 5 max attempts")
            
        except Exception as e:
            Logger.error(f"Error setting up auto reconnect: {e}")
    ###############################################################################################


####################***-- Reconnect ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic--#################################################
    def reconnect_with_retry(self, max_attempts=3):
        """Reconnect ‡∏û‡∏£‡πâ‡∏≠‡∏° retry logic ‡πÉ‡∏ô Python"""
        if not self.current_device_uuid:
            return
        
        self.reconnect_attempts = getattr(self, 'reconnect_attempts', 0)
        
        if self.reconnect_attempts >= max_attempts:
            self.update_label(f"‚ùå Max reconnect attempts ({max_attempts}) reached")
            Logger.error(f"Max reconnect attempts reached: {max_attempts}")
            self.reconnect_attempts = 0
            return
        
        self.reconnect_attempts += 1
        
        try:
            Logger.info(f"üîÑ Reconnect attempt {self.reconnect_attempts}/{max_attempts}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Swift reconnect
            self.bridge.reconnectToDeviceWithUUID_(objc_str(self.current_device_uuid))
            
            self.update_label(f"üîÑ Reconnect Attempt {self.reconnect_attempts}/{max_attempts}\nDevice: {self.current_device_uuid[:8]}...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏á 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            Clock.schedule_once(self.check_retry_reconnect_result, 4.0)
            
        except Exception as e:
            Logger.error(f"Reconnect attempt {self.reconnect_attempts} failed: {e}")
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            Clock.schedule_once(lambda dt: self.reconnect_with_retry(max_attempts), 3.0)
      ###############################################################################################

################***-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏• Retry--#################################################
    def check_retry_reconnect_result(self, dt):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ reconnect ‡πÅ‡∏ö‡∏ö retry"""
        if not self.current_device_uuid:
            return
        
        try:
            is_connected = self.bridge.isDeviceConnected_(objc_str(self.current_device_uuid))
            
            if is_connected:
                # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï attempts
                self.reconnect_attempts = 0
                self.gatt_connected = True
                self.update_label(f"‚úÖ Reconnect Successful!\nAttempts used: {self.reconnect_attempts}\nDevice connected!")
                Logger.info("‚úÖ Reconnect successful, attempts reset")
                
            else:
                # ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                Logger.warning(f"Reconnect attempt {self.reconnect_attempts} failed, retrying...")
                Clock.schedule_once(lambda dt: self.reconnect_with_retry(), 2.0)
                
        except Exception as e:
            Logger.error(f"Error checking retry result: {e}")
            Clock.schedule_once(lambda dt: self.reconnect_with_retry(), 2.0)

    def reconnect(self):
        """‡πÄ‡∏Å‡πá‡∏ö method ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ compatibility"""
        Logger.info(f"Device reconnect requested...")
        
        if hasattr(self, '_device'):
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ _device ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
            self.connect_gatt(self._device)
        elif self.current_device_uuid:
            # ‡πÉ‡∏ä‡πâ reconnect method ‡πÉ‡∏´‡∏°‡πà
            self.reconnect_device(None)
        else:
            Logger.warning("No device available for reconnection")
            self.update_label("‚ùå No device to reconnect")

    def smart_reconnect(self, instance):
        """Smart reconnect ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô"""
        if not self.current_device_uuid:
            self.update_label("‚ùå No device selected")
            return
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_state = self.bridge.getConnectionStateForDevice_(objc_str(self.current_device_uuid))
            
            if current_state == "connected":
                self.update_label("‚úÖ Device already connected!")
                return
            elif current_state == "connecting":
                self.update_label("üîÑ Device is connecting...")
                return
            elif current_state == "disconnecting":
                self.update_label("‚è≥ Waiting for disconnection to complete...")
                Clock.schedule_once(lambda dt: self.smart_reconnect(None), 2.0)
                return
            else:  # disconnected
                Logger.info("Device disconnected, starting reconnection...")
                self.reconnect_with_retry(max_attempts=3)
                
        except Exception as e:
            Logger.error(f"Smart reconnect error: {e}")
            # Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ reconnect ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            self.reconnect_device(None)
    


    def rssi_scan(self, instance):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á RSSI ‡πÅ‡∏ö‡∏ö Real-time"""
        if not self.current_device_uuid:
            self.update_label("‚ùå No device found\nPlease scan for devices first")
            Logger.warning("No device available for RSSI check")
            return
        
        try:
            Logger.info(f"Starting real-time RSSI monitoring for: {self.current_device_uuid}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á monitor ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if hasattr(self, 'rssi_monitoring') and self.rssi_monitoring:
                # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á monitor ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
                #self.stop_rssi_monitoring()
                return
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Real-time RSSI monitoring
            self.start_realtime_rssi_monitoring()
            
        except Exception as e:
            Logger.error(f"Error starting RSSI monitoring: {e}")
            self.update_label(f"‚ùå RSSI Monitor Error\n{str(e)}")

    def start_realtime_rssi_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° RSSI ‡πÅ‡∏ö‡∏ö Real-time"""
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag
            self.rssi_monitoring = True
            self.rssi_update_count = 0
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° periodic RSSI updates ‡πÉ‡∏ô Swift
            self.bridge.startPeriodicRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
            
            # Schedule ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            self.rssi_monitor_event = Clock.schedule_interval(self.update_realtime_rssi, 1.0)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.update_label("üì∂ Starting Real-time RSSI...\nüîÑ Initializing...")
            
            Logger.info("‚úÖ Real-time RSSI monitoring started")
            
        except Exception as e:
            Logger.error(f"Error starting real-time RSSI: {e}")
            self.rssi_monitoring = False

    def update_realtime_rssi(self, dt):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó RSSI ‡πÅ‡∏ö‡∏ö Real-time ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
        if not self.rssi_monitoring or not self.current_device_uuid:
            return False  # ‡∏´‡∏¢‡∏∏‡∏î schedule
        
        try:
            # ‚úÖ Force ‡πÉ‡∏´‡πâ Swift ‡∏≠‡πà‡∏≤‡∏ô RSSI ‡πÉ‡∏´‡∏°‡πà
            self.bridge.startRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Swift ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
            Clock.schedule_once(self.display_updated_rssi, 0.5)
            
            return True
            
        except Exception as e:
            Logger.error(f"Error in real-time RSSI update: {e}")
            return True

    def display_updated_rssi(self, dt):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ RSSI ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ RSSI ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Swift
            current_rssi = self.bridge.getCurrentRSSIForDevice_(objc_str(self.current_device_uuid))
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            current_device = self.bridge.getCurrentDeviceInfo()
            
            if current_device and current_rssi != -999:
                name = current_device.objectForKey_(objc_str("name"))
                uuid = current_device.objectForKey_(objc_str("uuid"))
                major = current_device.objectForKey_(objc_str("major"))
                minor = current_device.objectForKey_(objc_str("minor"))
                
                rssi_value = current_rssi  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å getCurrentRSSI
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö
                self.rssi_update_count += 1
                
                # ‚úÖ Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
                old_rssi = getattr(self, 'last_rssi', None)
                Logger.info(f"üîç Debug - Old RSSI: {old_rssi}, New RSSI: {rssi_value}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                if old_rssi is None or old_rssi != rssi_value:
                    Logger.info(f"üì∂ RSSI Changed: {old_rssi} ‚Üí {rssi_value} dBm")
                    self.last_rssi = rssi_value
                    change_indicator = "üîÑ CHANGED"
                else:
                    Logger.info(f"üì∂ RSSI Same: {rssi_value} dBm")
                    change_indicator = "‚û°Ô∏è SAME"
                
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                current_time = time.strftime("%H:%M:%S")
                
                rssi_display = f"üì∂ RSSI Monitor (LIVE)\n"
                rssi_display += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                rssi_display += f"üïê Time: {current_time}\n"
                rssi_display += f"üì± Device: {name.UTF8String() if name else 'Unknown'}\n"
                rssi_display += f"üÜî UUID: {uuid.UTF8String()[:8] if uuid else 'N/A'}...\n"
                rssi_display += f"üì∂ RSSI: {rssi_value} dBm {change_indicator}\n"
                rssi_display += f"üî¢ Major: {major.intValue() if major else 0} | Minor: {minor.intValue() if minor else 0}\n"
                rssi_display += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                rssi_display += f"üîÑ Updates: {self.rssi_update_count}\n"
                rssi_display += f"üìà Last Change: {old_rssi} ‚Üí {rssi_value}\n"
                rssi_display += f"‚è±Ô∏è Refreshing every 1s\n"
                rssi_display += f"üõë Tap RSSI again to stop"
                
                self.update_label(rssi_display)
                
            else:
                Logger.warning(f"No valid RSSI value received: {current_rssi}")
            
            return True  # Continue scheduling
            
        except Exception as e:
            Logger.error(f"Error displaying RSSI: {e}")
            return True  # Continue ‡πÅ‡∏ï‡πà‡πÅ‡∏™‡∏î‡∏á error

    def stop_rssi_monitoring(self, instance=None):  # ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° instance parameter
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° RSSI Real-time"""
        try:
            Logger.info("üõë Stopping real-time RSSI monitoring...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î flag
            self.rssi_monitoring = False
            
            # ‡∏´‡∏¢‡∏∏‡∏î Clock schedule
            if hasattr(self, 'rssi_monitor_event'):
                self.rssi_monitor_event.cancel()
                delattr(self, 'rssi_monitor_event')
            
            # ‡∏´‡∏¢‡∏∏‡∏î periodic updates ‡πÉ‡∏ô Swift
            if self.current_device_uuid:
                self.bridge.stopPeriodicRSSIUpdatesForDevice_(objc_str(self.current_device_uuid))
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏¢‡∏∏‡∏î
            final_count = getattr(self, 'rssi_update_count', 0)
            final_rssi = getattr(self, 'last_rssi', 'N/A')
            
            stop_message = f"üì∂ RSSI Monitor Stopped\n"
            stop_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            stop_message += f"üïê Stopped at: {time.strftime('%H:%M:%S')}\n"
            stop_message += f"üìä Total Updates: {final_count}\n"
            stop_message += f"üì∂ Last RSSI: {final_rssi} dBm\n"
            stop_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            stop_message += f"‚úÖ Monitoring stopped\n"
            stop_message += f"üîÑ Tap RSSI to start again"
            
            self.update_label(stop_message)
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
            if hasattr(self, 'rssi_update_count'):
                delattr(self, 'rssi_update_count')
            if hasattr(self, 'last_rssi'):
                delattr(self, 'last_rssi')
            
            Logger.info("‚úÖ RSSI monitoring stopped successfully")
            
        except Exception as e:
            Logger.error(f"Error stopping RSSI monitoring: {e}")




def update_ui(self, name, rssi):
    scanned_info = f"{name}, RSSI: {rssi} dBm\nUUID: {self._uuid}\nMajor: {self._major}, Minor: {self._minor}"
    
    app = App.get_running_app()
    if app and hasattr(app.root, 'ids') and 'label' in app.root.ids:
        current_text = app.root.ids.label.text
        app.root.ids.label.text = scanned_info
    else:
        # fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ids
        self.label.text = scanned_info



if __name__ == '__main__':
    app = BluetoothGATTApp()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GATT methods ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏° app
    def test_after_start():
        Clock.schedule_once(lambda dt: app.test_all_gatt_methods(), 5.0)
    
    test_after_start()
    app.run()
